{"name": "Добавление книг в корзину и проверка корзины", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.185)\nStacktrace:\n\tGetHandleVerifier [0x00EBC203+27395]\n\t(No symbol) [0x00E53E04]\n\t(No symbol) [0x00D51B7F]\n\t(No symbol) [0x00D2E483]\n\t(No symbol) [0x00DBA06F]\n\t(No symbol) [0x00DCC3D6]\n\t(No symbol) [0x00DB3736]\n\t(No symbol) [0x00D87541]\n\t(No symbol) [0x00D880BD]\n\tGetHandleVerifier [0x01173AB3+2876339]\n\tGetHandleVerifier [0x011C7F7D+3221629]\n\tGetHandleVerifier [0x00F3D674+556916]\n\tGetHandleVerifier [0x00F4478C+585868]\n\t(No symbol) [0x00E5CE44]\n\t(No symbol) [0x00E59858]\n\t(No symbol) [0x00E599F7]\n\t(No symbol) [0x00E4BF4E]\n\tBaseThreadInitThunk [0x76C7FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x773380CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7733809E+238]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae21f09ad0683137fed7e8b12bdb35ce\")>\n\n    @allure.feature(\"Корзина\")\n    @allure.story(\"Открытие корзины с продуктами\")\n    @allure.title(\"Добавление книг в корзину и проверка корзины\")\n    def test_cart_with_products(browser):\n>       browser.get(\"https://www.chitai-gorod.ru/\")\n\nautotests\\functional_test.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022BB6F466C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x773380CE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7733809E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.185)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00EBC203+27395]\nE       \t(No symbol) [0x00E53E04]\nE       \t(No symbol) [0x00D51B7F]\nE       \t(No symbol) [0x00D2E483]\nE       \t(No symbol) [0x00DBA06F]\nE       \t(No symbol) [0x00DCC3D6]\nE       \t(No symbol) [0x00DB3736]\nE       \t(No symbol) [0x00D87541]\nE       \t(No symbol) [0x00D880BD]\nE       \tGetHandleVerifier [0x01173AB3+2876339]\nE       \tGetHandleVerifier [0x011C7F7D+3221629]\nE       \tGetHandleVerifier [0x00F3D674+556916]\nE       \tGetHandleVerifier [0x00F4478C+585868]\nE       \t(No symbol) [0x00E5CE44]\nE       \t(No symbol) [0x00E59858]\nE       \t(No symbol) [0x00E599F7]\nE       \t(No symbol) [0x00E4BF4E]\nE       \tBaseThreadInitThunk [0x76C7FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x773380CE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7733809E+238]\n\n..\\..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1722191649736, "stop": 1722191649737, "uuid": "2d109bde-e456-4b92-8888-6294fb63b007", "historyId": "df797d9ecbc7e67b8b880cd7c77836cb", "testCaseId": "df797d9ecbc7e67b8b880cd7c77836cb", "fullName": "autotests.functional_test#test_cart_with_products", "labels": [{"name": "story", "value": "Открытие корзины с продуктами"}, {"name": "feature", "value": "Корзина"}, {"name": "parentSuite", "value": "autotests"}, {"name": "suite", "value": "functional_test"}, {"name": "host", "value": "DESKTOP-5RU07EA"}, {"name": "thread", "value": "12220-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "autotests.functional_test"}]}